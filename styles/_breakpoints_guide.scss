// Breakpoints
$bp-small: 48em; // 768px
$bp-medium: 64em; // 1024px
$bp-large: 85.375em; // 1366px
$bp-xlarge: 120em; // 1920px
$bp-xxlarge: 160em; // 2560px

// Media Queries
$mq-small: "(min-width: #{$bp-small})";
$mq-medium: "(min-width: #{$bp-medium})";
$mq-large: "(min-width: #{$bp-large})";
$mq-xlarge: "(min-width: #{$bp-xlarge})";
$mq-xxlarge: "(min-width: #{$bp-xxlarge})";
$mq-retina: "(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)";

// Font-Size
$base-font-size: 1em;

// Line-Height
$base-line-height: 1.5;
$header-line-height: 1.25;

body {
    font-size: $base-font-size;
    line-height: $base-line-height;
  
    @media #{$mq-medium} {
      font-size: $base-font-size*1.2;
      line-height: $base-line-height*1.2;
    }
  
    @media #{$mq-large} {
      font-size: $base-font-size*1.3;
    }
  
    @media #{$mq-xlarge} {
      font-size: $base-font-size*1.4;
    }
  
    @media #{$mq-xxlarge} {
      font-size: $base-font-size*1.6;
    }
  }


//   Containment
// When it comes to controlling content, there are few tools in the responsive web design toolbox as useful as the ubiquitous ‘container’. This element has one purpose, and that is to control the maximum-width in which our content can extend to. Take for example the following, which is the most common way you see these elements defined in CSS:


.container {
    margin: 0 auto;
    max-width: 1024px;
  }

  .container {
    margin: 0 4%;
  
    @media #{$mq-medium} {
      margin: 0 8%;
    }
  
    @media #{$mq-large} {
      margin: 0 12%;
    }
  
    @media #{$mq-xlarge} {
      margin: 0 18%;
    }
  }

//   This approach works but, but it doesn't scale to large screens because the maximum width is too dependent on a specific width. Even if the max-width value was increased to something much larger, it isn't relative to the viewport width. A better way to approach this is to define the left and right margins as relative units and gradually increase these values as the screen size gets larger. As a result, content will be contained in relation to the screen width and feel more at home if the screen is extra large.

.container {
    margin: 0 4%;
  
    @media #{$mq-medium} {
      margin: 0 8%;
    }
  
    @media #{$mq-large} {
      margin: 0 12%;
    }
  
    @media #{$mq-xlarge} {
      margin: 0 18%;
    }
  }


//   Manage Images
// How you manage images on extra large screens is entirely dependent dependent on your project needs, but you will most likely need to serve up higher resolution variations of each image to ensure images aren’t too small. The approach we take is different, based on how the image is applied.

.detail {
    height: 0;
    padding-bottom: 40%;
    margin: 0 0 $base-spacing*2;
    background-image: url(/Death-Star/detail_sml.jpg);
    background-position: center center;
    background-size: cover;
  
    @media #{$mq-xlarge} and #{$mq-retina} {
      background-image: url(/Death-Star/detail_sml%402x.jpg);
    }
  
    @media #{$mq-medium} {
      background-image: url(Death-Star/detail_med.jpg);
    }
  
    @media #{$mq-medium} and #{$mq-retina} {
      background-image: url(/Death-Star/detail_med%402x.jpg);
    }
  
    // Additional media queries
  
  }

//   For background images, this is quite simple: define the background image on the appropriate element, give the element dimensions, and define higher resolution sources of the image within media queries. The image above illustrates how this is done on our demo. Notice that we are setting the height property to 0, providing bottom padding, and setting the background-size property to cover. This is a technique known as “Uncle Dave’s Ol' Padded Box”, and allows us to maintain an aspect ratio by percentage padding based on the width of the parent element.

// For inline images, we now have an HTML specification that allows us to extend the img and source elements to provide a list of available image sources and their sizes. This allows browsers to use this information to pick the best image source. The image below details how this is implemented on our demo, in which we are defining additional image sources and their sizes with srcset and sizes attributes. This enables the browser to switch image resolution based on screen size and pixel density, thus providing the most appropriate image.

// <header role="banner" class="header">
//   <div class="header__img">
//     <img  
//       srcset="./death-star_sml%402x.jpg 400w,
//       ./death-star_lrg.jpg 600w,
//       ./death-star_sml%402x.jpg 800w,
//       ./death-star_lrg%402x.jpg 1200w"
//       sizes ="(min-width:1336px) 75vw, 50vw"
//       alt="Death Star 02">
//   </div>
// </header>

// You might notice that we aren’t including a src attribute on our inline image. This is because we must leverage a polyfill to enable support for srcset and sizes in browsers that do not yet support them. Browsers without support will prefetch the img's src if specified, often causing wasteful overhead. To prevent this, it is recommended by the polyfill author to omit src and only use srcset.

// Serving the best possible experience at any screen size is imperative. When it comes to optimizing our content for large-scale displays, we shouldn't stop short of common desktop resolutions. With the proper planning, we can leverage the tools already available to us when building responsive websites to scale up and adapt our content for large-scale displays.